<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sh.vhr.mapper.SalaryMapper">

    <resultMap id="BaseResultMap" type="com.sh.vhr.model.Salary">
        <result column="id" property="id" jdbcType="INTEGER"/>
        <result column="basicSalary" property="basicSalary" jdbcType="INTEGER"/>
        <result column="bonus" property="bonus" jdbcType="INTEGER"/>
        <result column="lunchSalary" property="lunchSalary" jdbcType="INTEGER"/>
        <result column="trafficSalary" property="trafficSalary" jdbcType="INTEGER"/>
        <result column="allSalary" property="allSalary" jdbcType="INTEGER"/>
        <result column="pensionBase" property="pensionBase" jdbcType="INTEGER"/>
        <result column="pensionPer" property="pensionPer" jdbcType="FLOAT"/>
        <result column="createDate" property="createDate" jdbcType="TIMESTAMP"/>
        <result column="medicalBase" property="medicalBase" jdbcType="INTEGER"/>
        <result column="medicalPer" property="medicalPer" jdbcType="FLOAT"/>
        <result column="accumulationFundBase" property="accumulationFundBase" jdbcType="INTEGER"/>
        <result column="accumulationFundPer" property="accumulationFundPer" jdbcType="FLOAT"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
    </resultMap>

    <insert id="addSalary" parameterType="com.sh.vhr.model.Salary" useGeneratedKeys="true" keyProperty="id">
        insert into salary
        (
         basicSalary,
         bonus,
         lunchSalary,
         trafficSalary,
         pensionBase,
         pensionPer,
         medicalBase,
         medicalPer,
         accumulationFundBase,
         accumulationFundPer,
         name,
         createDate
         )
         values
          (
          #{basicSalary},
          #{bonus},
          #{lunchSalary},
          #{trafficSalary},
          #{pensionBase},
          #{pensionPer},
          #{medicalBase},
          #{medicalPer},
          #{accumulationFundBase},
          #{accumulationFundPer},
          #{name},
          #{createDate}
          )
    </insert>
    <update id="updateSalary">
        update salary
        <set>
            <if test="basicSalary != null">
                basicSalary = #{basicSalary},
            </if>
            <if test="bonus != null">
                bonus = #{bonus},
            </if>
            <if test="lunchSalary != null">
                lunchSalary = #{lunchSalary},
            </if>
            <if test="trafficSalary != null">
                trafficSalary = #{trafficSalary},
            </if>
            <if test="allSalary != null">
                allSalary = #{allSalary},
            </if>
            <if test="pensionBase != null">
                pensionBase = #{pensionBase},
            </if>
            <if test="pensionPer != null">
                pensionPer = #{pensionPer},
            </if>
            <if test="createDate != null">
                createDate = #{createDate},
            </if>
            <if test="medicalBase != null">
                medicalBase = #{medicalBase},
            </if>
            <if test="medicalPer != null">
                medicalPer = #{medicalPer},
            </if>
            <if test="accumulationFundBase != null">
                accumulationFundBase = #{accumulationFundBase},
            </if>
            <if test="accumulationFundPer != null">
                accumulationFundPer = #{accumulationFundPer},
            </if>
            <if test="name != null">
                name = #{name},
            </if>
        </set>
        where id = #{id}
    </update>
    <delete id="deleteSalaryById">
        delete from salary where id = #{id}
    </delete>

    <select id="getAllSalaries" resultMap="BaseResultMap">
        select * from salary;
    </select>

    <select id="getSalaryByEmployeeId" resultMap="BaseResultMap">
        select * from salary where id = (select sid from empsalary where eid = #{empId})
    </select>
</mapper>